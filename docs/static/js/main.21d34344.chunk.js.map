{"version":3,"sources":["components/AddCategory.jsx","components/GiftGridItem.jsx","helpers/apiGif.js","hooks/useFetchGifs.js","components/GiftGrid.jsx","GiftExpertApp.jsx","index.js"],"names":["AddCategory","setSeries","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","htmlFor","type","name","placeholder","value","onChange","target","GiftGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_large","useFetchGifs","loading","state","setState","useEffect","then","imgs","GiftGrid","color","height","width","nanoid","GiftExpertApp","series","ReactDOM","render","document","getElementById"],"mappings":"yNAoCeA,EAjCK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAEGC,mBAAS,IAFZ,mBAE1BC,EAF0B,KAEdC,EAFc,KAejC,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAU,SAAAK,GAAC,OAAGH,GAAH,mBAAkBG,OAC7BF,EAAc,MAOlB,SACI,uBAAOM,QAAQ,QAAf,SACI,uBAAOC,KAAK,OACZC,KAAK,QACLC,YAAY,mBACZC,MAAOX,EACPY,SAAU,SAACT,GAAD,OAAKF,EAAcE,EAAEU,OAAOF,e,QCXvCG,EAZM,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAIzB,OACI,sBAAKC,UAAU,uDAAf,UACI,qBAAKC,IAAMF,EAAKG,IAAKJ,IACrB,mBAAGE,UAAU,cAAb,SAA6BF,Q,8BCT5BK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAAUF,GAF7C,+DAIKG,MAAMR,GAJX,cAIbS,EAJa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,gBAAgBjB,QAVtB,kBAeZY,GAfY,4CAAH,sDC2BLM,EAxBM,SAAEb,GAAe,IAAD,EAEPtB,mBAAS,CAC/B4B,KAAK,GACLQ,SAAQ,IAJqB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAqBjC,OAdAC,qBAAU,WAENlB,EAASC,GACRkB,MAAK,SAAAC,GAEEH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAKtB,CAACd,IAEIe,G,iBCWIK,EA7BE,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,EAIRa,EAAcb,GAA9BM,EAJwB,EAIxBA,KAAKQ,EAJmB,EAInBA,QAIZ,OACI,qCACI,qBAAIlB,UAAU,gEAAd,cAAgFI,EAAhF,OAEEc,EACD,qBAAKlB,UAAU,mCAAf,SACG,cAAC,IAAD,CAAcT,KAAM,OAAQkC,MAAO,UAAWC,OAAQ,KAAMC,MAAO,SAEtE,qBAAK3B,UAAU,YAAf,SAEGU,EAAKE,KAAI,SAAA1B,GAAC,OAEN,aADA,CACC,EAAD,eAAiCA,GAAd0C,wBCGxBC,G,YAtBO,WAAO,IAAD,EAEI/C,mBAAS,CAAC,aAFd,mBAEjBgD,EAFiB,KAETjD,EAFS,KAIxB,OACI,gCACI,oBAAImB,UAAU,0BAAd,2BACA,cAAC,EAAD,CAAanB,UAAWA,IACxB,oBAAImB,UAAU,eACd,oBAAIA,UAAU,OAAd,SAEQ8B,EAAOlB,KAAI,SAAA1B,GAAC,OACR,cAAC,EAAD,CAEAkB,SAAUlB,GADL0C,yB,MCf7BG,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.21d34344.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setSeries}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setSeries(e=>[inputValue, ...e])\r\n            setInputValue(\"\")\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"serie\">\r\n                <input type=\"text\" \r\n                name=\"serie\" \r\n                placeholder=\"Ingresa una tema\"\r\n                value={inputValue}\r\n                onChange={(e)=>setInputValue(e.target.value)}\r\n                />\r\n            </label>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setSeries: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GiftGridItem = ({title,url}) => {\r\n\r\n    // console.log({id,title,url})\r\n\r\n    return (\r\n        <div className=\"card shadow-xl p-0 animate__animated animate__zoomIn\">\r\n            <img src= {url} alt={title} />\r\n            <p className=\"bg-gray-400\">{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GiftGridItem\r\n","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=aPTPePBFtm4BE0ipqr9J2kI5HEPsXU8R`\r\n\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json()\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_large.url\r\n        }\r\n    })\r\n    \r\n\r\n    return gifs;\r\n}","import { useState,useEffect } from 'react'\r\nimport { getGifs } from '../helpers/apiGif'\r\n\r\nconst useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    useEffect(()=>{\r\n\r\n        getGifs( category )\r\n        .then(imgs=>{\r\n\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n\r\n            })\r\n\r\n    },[category])\r\n\r\n    return state\r\n}\r\n\r\nexport default useFetchGifs\r\n","import GiftGridItem from './GiftGridItem'\r\nimport { nanoid } from 'nanoid'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\nconst GiftGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    const {data,loading} = useFetchGifs( category );\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"font-bold text-2xl py-6 animate__animated animate__fadeInDown\"> {category} </h3>\r\n\r\n            { loading? \r\n            (<div className=\"flex items-center justify-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={\"7%\"} width={\"7%\"} />\r\n            </div>):\r\n            (<div className=\"card-grid\">\r\n            {\r\n                data.map(e => (\r\n                    // Esto siginfica que le pasamos como propiedades al componente todos los llave-valor del objeto que estamos iterando con el .map()\r\n                    <GiftGridItem key={nanoid()} {...e} />\r\n                ))\r\n            }\r\n            </div>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GiftGrid\r\n","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GiftGrid from './components/GiftGrid'\r\nimport { nanoid } from 'nanoid'\r\nimport './app.css'\r\nimport 'animate.css';\r\n\r\nconst GiftExpertApp = () => {\r\n\r\n    const [series, setSeries] = useState([\"Mugiwara\"])\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-2xl font-bold py-4\">GiftExpertApp</h2>\r\n            <AddCategory setSeries={setSeries}/>\r\n            <hr className=\"bg-red-700\"/>\r\n            <ol className=\"mt-4\">\r\n                {\r\n                    series.map(e=>(\r\n                        <GiftGrid \r\n                        key={nanoid()}\r\n                        category={e}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GiftExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}